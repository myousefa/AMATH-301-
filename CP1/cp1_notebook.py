# -*- coding: utf-8 -*-
"""CP1_Notebook.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-KGyeyWuB8smrrJm6xc3bW-HoBYxH7Y6
"""

import numpy as np

# Problem 1 --------------------------------------
# Initialize A, B, C, x, y, and z as numpy arrays.
A = np.matrix([[3, -.5], [3.14, np.exp(3)]])
B = np.matrix([[1,2,3,-4], [(np.pi),6,3,-1.4]])
C = np.matrix([[2.7,-3.4,0], [1,5.5,-3.7], [4.5,-1.1,6.7]])
x = np.matrix([[1], [np.cos(4)], [-2]])
y = np.matrix([[3,-5]])
z = np.matrix([[2], [0], [np.tan(2)], [-3.6]])


# Then do the calculations for A1 to A5.
A1 = 3*x
#print(A1)

A2 = (z.T * B.T) + y
#print(A2)

A3 = C*x
#print(A3)

A4 = A*B
#print(A4)

A5 = B.T * A.T 
#print(A5)


# Problem 2 --------------------------------------
# Initialize x using linspace and y using arrange.  Reshape each to take the form of a vector (a single row 2-D array).
# Set the variables A6 and A7, and do the calculations for A8 to A10
# Note:  if you ever have the need to assign a particular variable, say x to say A6, use A6 = x.copy() to be safe.

x = np.arange(
    start=-4,
    stop=2,
    step=5/72)
A6 = x[:73]
A6 = np.reshape(A6,(1,73))
#print(A6.shape)

y = np.arange(
    start=0,
    stop=73,
    step=1)
A7 = np.cos(y[:73])
A7 = np.reshape(A7, (1,73))
#print(A7)

A8 = A6*A7
#print(A8)

A9 = A6/A7
#print(A9)

A10 = (A6**3) - A7
#print(A10)


# Problem 3 Part 1a
# Initialize P0, K, and r.  Calculate P1, P2, and P3.  Save P3 as A11.
P = 5
K = 10
r = 2
# Array to hold prev answers
temp_arr = []
temp_arr.append(P)
# perform calculation
for i in range(2):
    temp_arr.append((r*temp_arr[i])*(1-(temp_arr[i]/K)))
A11 = temp_arr[-1]
#print(A11)

# Problem 3 Part 1b
# Reinitialize P0, K, and r.  Calculate P1, P2, P3, and P4.  Save P4 as A12.
# Here we don't have to worry about pointers.
P = 10
K = 15
r = 3
# Array to hold prev answers
temp_arr = []
temp_arr.append(P)
# perform calculation
for i in range(3):
    temp_arr.append((r*temp_arr[i])*(1-(temp_arr[i]/K)))
A12 = temp_arr[-1]
#print(A12)


# Problem 3 Part 2a
# Reinitialize P0, K, and r.  Calculate P1, P2, and P3.  Save P3 as A13.
# Here we don't have to worry about pointers.
P = 5
K = 12
r = 2
# Array to hold prev answers
temp_arr = []
temp_arr.append(P)
# perform calculation
for i in range(3):
    temp_arr.append( (temp_arr[i]) * (np.exp((r * (1-(temp_arr[i]/K))) )) )
A13 = temp_arr[-1]
print(A13)

# Problem 3 Part 2b
# Reinitialize P0, K, and r.  Calculate P1, P2, P3, and P4.  Save P4 as A14.
# Here we don't have to worry about pointers.
P = 2
K = 25
r = 2.5
# Array to hold prev answers
temp_arr = []
temp_arr.append(P)
# perform calculation
for i in range(4):
    temp_arr.append( (temp_arr[i]) * ( (np.exp(1))**(r * (1-(temp_arr[i]/K) ) )) )
A14 = temp_arr[-1]
print(A14)

# Problem 3 Part 2c
# Don't think too hard about this one.  No calculations will be necessary.  Save your educated guess as A15

# Since P0 is 0 and the equation is multiplied by 0 A15 must be 0.
A15 = 0